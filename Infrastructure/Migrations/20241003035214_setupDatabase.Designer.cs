// <auto-generated />
using System;
using Aletheia.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace Aletheia.Infra.Migrations
{
    [DbContext(typeof(FIAPDbContext))]
    [Migration("20241003035214_setupDatabase")]
    partial class setupDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Aletheia.Domain.Entities.Claim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("claim_type");

                    b.Property<Guid>("ConsultationId")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("OccurrenceDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("occurrence_date");

                    b.Property<string>("SuggestedPreventiveAction")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("suggested_preventive_action");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationId");

                    b.ToTable("tb_claims");
                });

            modelBuilder.Entity("Aletheia.Domain.Entities.Consultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("ConsultationDate")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("consultation_date");

                    b.Property<double>("ConsultationValue")
                        .HasColumnType("BINARY_DOUBLE")
                        .HasColumnName("consultation_value");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("RAW(16)");

                    b.Property<string>("RiskStatus")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("risk_status");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("tb_consultations");
                });

            modelBuilder.Entity("Aletheia.Domain.Entities.Dentist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<double?>("ClaimsRate")
                        .HasColumnType("BINARY_DOUBLE")
                        .HasColumnName("claims_rate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("registration_number");

                    b.Property<string>("RiskStatus")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("risk_status");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("tb_dentist");
                });

            modelBuilder.Entity("Aletheia.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("AssociatedClaims")
                        .HasColumnType("text")
                        .HasColumnName("associated_claims");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int?>("ConsultationFrequency")
                        .HasColumnType("int")
                        .HasColumnName("consultation_frequency");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("RiskStatus")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("risk_status");

                    b.HasKey("Id");

                    b.ToTable("tb_patient");
                });

            modelBuilder.Entity("ConsultationDentist", b =>
                {
                    b.Property<Guid>("ConsultationsId")
                        .HasColumnType("RAW(16)");

                    b.Property<Guid>("DentistsId")
                        .HasColumnType("RAW(16)");

                    b.HasKey("ConsultationsId", "DentistsId");

                    b.HasIndex("DentistsId");

                    b.ToTable("ConsultationDentist");
                });

            modelBuilder.Entity("Aletheia.Domain.Entities.Claim", b =>
                {
                    b.HasOne("Aletheia.Domain.Entities.Consultation", "Consultation")
                        .WithMany("Claims")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("Aletheia.Domain.Entities.Consultation", b =>
                {
                    b.HasOne("Aletheia.Domain.Entities.Patient", "Patient")
                        .WithMany("Consultations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ConsultationDentist", b =>
                {
                    b.HasOne("Aletheia.Domain.Entities.Consultation", null)
                        .WithMany()
                        .HasForeignKey("ConsultationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aletheia.Domain.Entities.Dentist", null)
                        .WithMany()
                        .HasForeignKey("DentistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aletheia.Domain.Entities.Consultation", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("Aletheia.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Consultations");
                });
#pragma warning restore 612, 618
        }
    }
}
